// Assignment code here

// generate-password function to call later inside the writePassword function below
var generatePassword = function() {
  // first--declare variables that the confirm prompts will add or not add to the pool of characters from which the password will be created.
  var uppers = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  var lowers = uppers.toLowerCase();
  var numbers = "1234567890";
  var specials = "~!@#$%^&*()_+-=[]{}|;:.,?><"

  // second--declare the variable that contains the number of characters that the password will contain--so we know how many times to choose a character at random from the pool to generate the password.
  var charLength = prompt("How many characters would you like your password to contain? (8-128)");
  
  // if the user fails to input a number--and one within the parameters--they should be alerted to this and asked to try again until they answer appropriately.
  while (charLength < 8 || charLength > 128 || isNaN(charLength)) {
    alert("Please choose a number between 8 and 128.");
    charLength = prompt("How many characters would you like your password to contain? (8-128)");
  } 

  // variables that store the confirm responses need to be declared outside of the confirmCriteria function so that they can be accessed for the while statement below (which will ask the user to select at least one character type if they haven't).
  var confirmUppers;
  var confirmLowers;
  var confirmNumbers;
  var confirmSpecials;

  // the confirm variables are put in a function so that not only will they be updated once, but we can call for them to be updated agian in the while statement if the user fails to choose at least one character type.
  var confirmCriteria = function() {
    confirmUppers = confirm("Click OK to include uppercase characters.");
    confirmLowers = confirm("Click OK to include lowercase letters.");
    confirmNumbers = confirm("Click OK to include numeric characters.");
    confirmSpecials = confirm("Click OK to include special characters.");
  }

  confirmCriteria();

  // as noted above--this while statement will alert the user to their failure to choose at least one character type and then go through the confrims again.
  while (confirmUppers != true && confirmLowers != true && confirmNumbers != true && confirmSpecials != true) {
    alert("Please choose at least one character type (uppercase, lowercase, numeric, special) in order to generate a password.");
    confirmCriteria();
  }
  
  // now that we know which character types the user wants to use to generate a password, we can build a single pool of characters using those choices stored in the confirm variables. 
  // true values (the character type was chosen) mean that we should add the string of characters from the corresponding character-type variable to the pool that the password will be generated from.
  var passwordPool;

  if (confirmUppers) {
    passwordPool =  passwordPool + uppers;
  }
  if (confirmLowers) {
    passwordPool = passwordPool + lowers;
  }
  if (confirmNumbers) {
    passwordPool = passwordPool + numbers;
  }
  if (confirmSpecials) {
    passwordPool = passwordPool + specials;
  }

  // the string that makes up the passwordPool variable at this point still contains the string "undefined" from when the variable was first declared. 
  // the slice() function removes "undefined" from the string of characters to choose from--especially important if lowers are not confirmed.
  passwordPool = passwordPool.slice(9);
  
  // password1--which will eventually be the value that is returned to the 'password' variable and then written into the page in the writePassword function below--is declared and given its first character here outside of the for statement that will generate the whole password below.
  var password1 = passwordPool.charAt(Math.floor(Math.random()*passwordPool.length));

  // since the first character of the password is generated when the password1 variable is declared above, the for statement starts by generating the second variable randomly (index = 1) and proceeds until the password is the same length as was entered by the user in the first prompt and stored as charLength.
  for (i = 1; i < charLength; i++) {
    // each character of the password is generated by adding the a string chosen at random from the passwordPool to the current string of characters generated.
    password1 = password1 + passwordPool.charAt(Math.floor(Math.random()*passwordPool.length));
  }

  // Once the operation in the for statement is finished, the value of password1 is returned so that it can be stored in the 'password' variable and eventually written into the page in the writePassword() function.
  return password1;

}


// Get references to the #generate element
var generateBtn = document.querySelector("#generate");

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  var passwordText = document.querySelector("#password");
  passwordText.value = password;
}

// Add event listener to generate button
<<<<<<< HEAD
generateBtn.addEventListener("click", writePassword);
=======
// When the generate button 'hears' a click, it will run the writePassword function
generateBtn.addEventListener("click", writePassword);
>>>>>>> develop
